// Â© 2022 AO Kaspersky Lab. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

/* Security configuration of the "HelloWorld" example. */

/* Definition of the execute interface. */
execute: kl.core.Execute

/* Import the file with the declaration of basic security policy aliases. */
use nk.base._

/* Declaration of entities. */
use EDL Einit
use EDL kl.core.Core
use EDL kl.drivers.BSP
use EDL kl.drivers.GPIO
use EDL kl.drivers.RAMDisk
use EDL kl.VfsRamFs
use EDL kl.VfsNet
use EDL kl.rump.Dhcpcd

use EDL helloworld.GreeterClient

// Allows the KasperskyOS kernel to start itself and tasks with the Einit class
execute src = kl.core.Core
{
    match dst = kl.core.Core { grant () }
    match dst = Einit { grant () }
}

// Allows the Einit program to start other programs
execute src = Einit
{
    grant()
}

request dst = kl.core.Core
{
    match src = Einit { grant () }
    match src = kl.drivers.BSP { grant () }
    match src = kl.drivers.GPIO { grant () }
    match src = kl.drivers.RAMDisk { grant () }
    match src = kl.VfsRamFs { grant () }
    match src = kl.VfsNet { grant () }
    match src = kl.rump.Dhcpcd { grant () }
}

response src = kl.core.Core
{
    match dst = Einit { grant () }
    match dst = kl.drivers.BSP { grant () }
    match dst = kl.drivers.GPIO { grant () }
    match dst = kl.drivers.RAMDisk { grant () }
    match dst = kl.VfsRamFs { grant () }
    match dst = kl.VfsNet { grant () }
    match dst = kl.rump.Dhcpcd { grant () }
}

request src = kl.VfsRamFs dst = kl.drivers.RAMDisk
{
    grant () 
}

response src = kl.drivers.RAMDisk dst = kl.VfsRamFs
{
    grant ()
}

request src = kl.rump.Dhcpcd
{
    match dst = kl.VfsRamFs { grant () }
    match dst = kl.VfsNet { grant () }
}

response dst = kl.rump.Dhcpcd
{
    match src = kl.VfsRamFs { grant () }
    match src = kl.VfsNet { grant () }
}

request src = helloworld.GreeterClient dst = kl.core.Core
{
    match endpoint = sync.Sync
    {
        match method = Alloc { grant () }
        match method = Free { grant () }
        match method = Wait { grant () }
        match method = Wake { grant () }
    }
    match endpoint = task.Task 
    {
        match method = FreeSelfEnv { grant () }
        match method = GetPath { grant () }
        match method = GetName { grant () }
        match method = Exit { grant () }
    }
    match endpoint = hal.HAL
    {
        match method = GetEnv { grant () }
        match method = DebugWrite { grant () }
    }
    match endpoint = handle.Handle
    {
        match method = Close { grant() }
    }
    match endpoint = vmm.VMM
    {
        match method = Allocate { grant () }
        match method = Commit { grant () }
        match method = Decommit { grant () }
        match method = Free { grant () }
        match method = Protect { grant () }
    }
    match endpoint = thread.Thread
    {
        match method = Create { grant () }
        match method = GetSchedPolicy { grant () }
        match method = Resume { grant () }
        match method = SetPriority { grant() }
        match method = SetTls { grant () }
        match method = Sleep { grant () }
        match method = Terminate { grant () }
    }
}

request src = helloworld.GreeterClient
{
    match dst = kl.VfsRamFs { grant () }
    match dst = kl.VfsNet { grant () }
}

response dst = helloworld.GreeterClient
{
    match src = kl.core.Core { grant () }
    match src = kl.VfsRamFs { grant () }
    match src = kl.VfsNet { grant () }
}

// Allows all tasks to return errors
error
{
    grant ()
}

security src = kl.drivers.RAMDisk method = Register
{
    grant ()
}
